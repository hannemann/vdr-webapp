{
  "name": "stream-transcoder",
  "version": "0.0.3",
  "author": {
    "name": "Kristian Trenskow",
    "email": "trenskow@me.com"
  },
  "description": "FFmpeg based media transcoder that supports streams.",
  "main": "index.js",
  "keywords": [
    "ffmpeg",
    "stream",
    "transcoding",
    "media",
    "video"
  ],
  "license": "BSD 2-Clause license",
  "engines": {
    "node": ">=0.10.15"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/trenskow/stream-transcoder.js.git"
  },
  "readme": "#stream-transcoder.js\n**FFmpeg based media transcoder that supports streams.**\n\n##Introduction\nFlexible media transcoding using FFmpeg. Stream media in and out - converting it on the fly.\n\nI created this, because the current FFmpeg transcoders for node.js did not properly support streams as I needed.\n\nAlong with the [stream-body-parser.js](https://github.com/trenskow/stream-body-parser.js), this makes a great companion for doing stuff like this.\n\n    var express = require('express'),\n        StreamBodyParser = require('stream-body-parser'),\n        Transcoder = require('stream-transcoder');\n    \n    var app = express();\n    \n    var bodyParser = new StreamBodyParser(app);\n    \n    bodyParser.process('video/*', function(stream, req, next) {\n    \t\n    \tvar myGridFSWriteStream = (Some MongoDB GridFS stream)\n    \t\n    \tnew Transcoder(stream)\n    \t    .maxSize(320, 240)\n    \t    .videoCodec('h264')\n    \t    .videoBitrate(800 * 1000)\n    \t    .fps(25)\n    \t    .audioCodec('libfaac')\n    \t    .sampleRate(44100)\n    \t    .channels(2)\n    \t    .audioBitrate(128 * 1000)\n    \t    .format('mp4')\n    \t    .on('finish', function() {\n    \t    \tnext();\n    \t    })\n    \t    .stream().pipe(myGridFSWriteStream);\n    \t\n    });\n    \n    app.post('/', function(req, res) {\n    \tres.send(200); // File uploaded\n    });\n    \n    app.listen(3000);\n    \nIn the above example the video is transcoded as it is being uploaded, and then piped directly into the database. So when the route is being called, the video is transcoded and stored.\n\n## Installing FFmpeg\nFFmpeg is not installed with this package. So before usage, install FFmpeg using your favorite package manager or download it at [ffmpeg.org](http://ffmpeg.org/).\n\n## Class: Transcoder\n`Transcoder` is an EventEmitter.\n\nThis class transcodes from one media format to another. It supports both files and streams as input and/or output. Some formats are not suited for streaming, in which case the `Transcoder` will emit an `error`, but most formats are.\n\n### new Transcoder(stream)\n\n  * `stream` Object - A readable stream.\n  \nPrepares a new Transcoder with a stream as its input.\n\n### new Transcoder(file)\n\n  * `file` String - The path of the file to be transcoded.\n\nPrepares a new Transcoder with a file as its input.\n\n### Event: 'metadata'\n\n  * `metadata` Object - Metadata of input and output streams.\n\nEmitted when metadata is available for both input and output streams. If no output is specified (by using `transcoder.exec()`), only input streams will be described.\n\nThis an example of a transcoding process metadata.\n\n    {\n        \"input\": {\n            \"streams\": [\n                {\n                    \"type\": \"video\",\n                    \"codec\": \"h264\",\n                    \"bitrate\": 10131000,\n                    \"fps\": 25,\n                    \"size\": {\n                        \"width\": 1280,\n                        \"height\": 720\n                    },\n                    \"aspect\": 1.7777777777777777,\n                    \"colors\": \"yuv420p\"\n                },\n                {\n                    \"type\": \"audio\",\n                    \"codec\": \"aac\",\n                    \"samplerate\": 44100,\n                    \"channels\": 2,\n                    \"bitrate\": 106000\n                }\n            ],\n            \"duration\": 250068,\n            \"synched\": true\n        },\n        \"output\": {\n            \"streams\": [\n                {\n                    \"type\": \"video\",\n                    \"codec\": \"h264\",\n                    \"bitrate\": 800000,\n                    \"size\": {\n                        \"width\": 320,\n                        \"height\": 180\n                    },\n                    \"aspect\": 1.7777777777777777,\n                    \"colors\": \"yuv420p\"\n                },\n                {\n                    \"type\": \"audio\",\n                    \"codec\": \"aac\",\n                    \"samplerate\": 44100,\n                    \"channels\": 2,\n                    \"bitrate\": 128000\n                }\n            ]\n        }\n    }\n\n### Event: 'progress'\n\n  * `progress` Object - Object describing current progress.\n\nEmitted when progress has been made in the transcoding.\n\nThis is an example of the `progress` object. Where `progress.progress` is a percentage of the total transcoding job.\n\n    {\n        \"frame\": 508,\n        \"fps\": 253,\n        \"quality\": 16,\n        \"size\": 1553408,\n        \"time\": 20041,\n        \"bitrate\": 608000,\n        \"progress\": 0.08014220132124063\n    }\n\n### Event: 'finish'\n\nEmitted when transcoding is complete.\n\n### Event: 'error'\n\n  * `error` Error - The error that occured.\n\nEmitted when FFmpeg exits with an error.\n\n### transcoder.videoCodec(codec)\n\n  * `codec` String - Name of the video codec. As an example `h264`.\n\nSets the video codec.\n\nReturns transcoder object.\n\n*Notice:* Supported video codecs depends on your FFmpeg installation. Running `ffmpeg -codecs` from your terminal will list the supported codecs.\n\n### transcoder.videoBitrate(bitrate)\n\n  * `bitrate` Number or String - The bitrate of the encoded video. Both `1280000` or `128 kbit` can be passed.\n\nSets the video bitrate.\n\nReturns transcoder object.\n\n### transcoder.fps(fps)\n\n  * `fps` Number - Frames per second.\n\nSets the number of frames per second.\n\nReturns transcoder object.\n\n### transcoder.format(format)\n\n  * `format` String - Output format.\n\nSets the output format.\n\nReturns transcoder object.\n\n*Notice:* Supported formats also depends on you FFmpeg installation. Running `ffmpeg -formats` from your terminal will list the supported formats.\n\n### transcoder.maxSize(width, height)\n\n  * `width` Number - Maximum width of video.\n  * `height` Number - Miximum height of video.\n\nSets the output video size, shrinking to fit the size to maintain aspect ratio. The output video will be within the defined size, but with aspect ratio is preserved.\n\nReturns transcoder object.\n\n### transcoder.minSize(width, height)\n\n  * `width` Number - Minimum width of video.\n  * `height` Number - Minimum height of video.\n\nSets the output video size, scaling it to have a minimum of both directions, while maintaining aspect ratio.\n\n### transcoder.size(width, height)\n\n  * `width` Number - Minimum width of video.\n  * `height` Number - Minimum height of video.\n\nSets the output video size, not maintaining aspect ratio if it doesn't fit.\n\nReturns transcoder object.\n\n### transcoder.passes(passes)\n\n   * `passes` Number - The number of encoder passes.\n\nSets the number of encoder passes.\n\nReturns transcoder object.\n\n### transcoder.aspectRatio(ratio)\n\n   * `ratio` Number - The desired aspect ratio. As an example `1.7777777`.\n\nSets the video aspect ratio.\n\nReturns transcoder object.\n\n### transcoder.audioCodec(codec)\n\n  * `codec` String - Name of the audio codec. As an example `mp3` or `aac`.\n\nSets the audio codec.\n\nReturns transcoder object.\n\n*Notice:* Supported audio codecs depends on your FFmpeg installation. Running `ffmpeg -codecs` from your terminal will list the supported codecs.\n\n### transcoder.sampleRate(rate)\n\n  * `rate` Number - Audio sample rate. As an example `44100`.\n\nSets the audio sample rate.\n\nReturns transcoder object.\n\n### transcoder.channels(channels)\n\n  * `channels` Number - Number of audio channels.\n\nSets the number of audio channels.\n\nReturns transcoder object.\n\n### transcoder.audioBitrate(bitrate)\n\n  * `bitrate` Number - The audio bitrate.\n\nSets the audio bitrate.\n\nReturns transcoder object.\n\n### transcoder.captureFrame(time)\n\n  * `time` Number - Time of frame in milliseconds.\n\nCapture a single frame at `time`. Sets up transcoder to jpeg output.\n\nReturns transcoder object.\n\n### transcoder.stream()\n\nReturns a writeable stream that will emit the transcoded media data.\n\n### transcoder.writeToFile(file)\n\n   * `file` String - Path of filename.\n\nWrites transcoded media data to `file`.\n\nReturns transcoder object.\n\n### transcoder.exec()\n\nExecutes the transcoder without outputting any data. This is useful if you only need metadata for a media file.\n\nReturns child process.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/trenskow/stream-transcoder.js/issues"
  },
  "homepage": "https://github.com/trenskow/stream-transcoder.js",
  "_id": "stream-transcoder@0.0.3",
  "_shasum": "b13ccf503a8a73fab59473da926ac5b1969cf066",
  "_from": "stream-transcoder@",
  "_resolved": "https://registry.npmjs.org/stream-transcoder/-/stream-transcoder-0.0.3.tgz"
}
